{
	"info": {
		"_postman_id": "4808ad63-9928-4b56-93ba-1eb50ec0de48",
		"name": "SIT331 7.1PCD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41968943"
	},
	"item": [
		{
			"name": "readMap",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Response body is not empty\", () => pm.expect(pm.response.text()).to.not.be.empty);\r",
							"pm.test(\"Response is an array\", () => pm.expect(pm.response.json()).to.be.an(\"array\"));\r",
							"\r",
							"// Additional tests for higher QP\r",
							"pm.test(\"Each command has required properties\", () => {\r",
							"  const commands = pm.response.json();\r",
							"  commands.forEach(command => {\r",
							"    pm.expect(command).to.include.keys(\"id\", \"rows\",\"columns\", \"description\", \"createdDate\", \"modifiedDate\");\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api-host}}:{{port}}/api/maps",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "readCommands Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Response body is not empty\", () => pm.expect(pm.response.text()).to.not.be.empty);\r",
							"pm.test(\"Response is an array\", () => pm.expect(pm.response.json()).to.be.an(\"array\"));\r",
							"\r",
							"// Additional tests for higher QP\r",
							"pm.test(\"Each command has required properties\", () => {\r",
							"  const commands = pm.response.json();\r",
							"  commands.forEach(command => {\r",
							"    pm.expect(command).to.include.keys(\"id\", \"name\", \"description\", \"isMoveCommand\");\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands"
					]
				}
			},
			"response": []
		},
		{
			"name": "readCommand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Response body is not empty\", () => pm.expect(pm.response.text()).to.not.be.empty);\r",
							"pm.test(\"Response is an object\", () => pm.expect(pm.response.json()).to.be.an(\"object\"));\r",
							"\r",
							"// Additional tests for higher QP\r",
							"pm.test(\"Object has required properties\", () => {\r",
							"  const command = pm.response.json();\r",
							"  pm.expect(command).to.include.keys(\"id\", \"name\", \"description\", \"isMoveCommand\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands/1",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "readCommandNonExistent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => pm.response.to.have.status(404));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands/10",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "createCommand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
							"pm.test(\"Response body is not empty\", () => pm.expect(pm.response.text()).to.not.be.empty);\r",
							"pm.test(\"Response is an object\", () => pm.expect(pm.response.json()).to.be.an(\"object\"));\r",
							"\r",
							"// Additional tests for higher QP\r",
							"pm.test(\"Response contains correct properties\", () => {\r",
							"  const command = pm.response.json();\r",
							"  pm.expect(command).to.include.keys(\"id\", \"name\", \"description\", \"isMoveCommand\");\r",
							"});\r",
							"\r",
							"pm.test(\"Location header points to new resource\", () => {\r",
							"  const newId = pm.response.json().id;\r",
							"  const expectedUrl = `${pm.variables.get(\"host\")}/api/robot-commands/${newId}`;\r",
							"  pm.expect(pm.response.headers.get(\"Location\")).to.include(expectedUrl);\r",
							"});\r",
							"\r",
							"// Set environment variables for subsequent requests\r",
							"pm.environment.set(\"command_id\", pm.response.json().id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": {{new_command_name}},\r\n  \"IsMoveCommand\" : false,\r\n  \"description\": {{new_command_description}},\r\n  \"isMoveCommand\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateCommand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Response body is not empty\", () => pm.expect(pm.response.text()).to.not.be.empty);\r",
							"pm.test(\"Response is an object\", () => pm.expect(pm.response.json()).to.be.an(\"object\"));\r",
							"\r",
							"// Additional tests for higher QP\r",
							"pm.test(\"Updated data matches request\", () => {\r",
							"  const updatedCommand = pm.response.json();\r",
							"  pm.expect(updatedCommand.name).to.eql(pm.variables.get(\"updated_name\"));\r",
							"  pm.expect(updatedCommand.description).to.eql(pm.variables.get(\"updated_description\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 3,\r\n  \"name\": \"MOVE FORWARD\",\r\n  \"isMoveCommand\": true,\r\n  \"description\": \"Move the robot forward\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands/1",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "createMap",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
							"pm.test(\"Response body is not empty\", () => pm.expect(pm.response.text()).to.not.be.empty);\r",
							"pm.test(\"Response is an object\", () => pm.expect(pm.response.json()).to.be.an(\"object\"));\r",
							"\r",
							"// Additional tests for higher QP\r",
							"pm.test(\"Response contains correct properties\", () => {\r",
							"  const command = pm.response.json();\r",
							"  pm.expect(command).to.include.keys(\"id\", \"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Location header points to new resource\", () => {\r",
							"  const newId = pm.response.json().id;\r",
							"  const expectedUrl = `${pm.variables.get(\"host\")}/api/maps/${newId}`;\r",
							"  pm.expect(pm.response.headers.get(\"Location\")).to.include(expectedUrl);\r",
							"});\r",
							"\r",
							"// Set environment variables for subsequent requests\r",
							"pm.environment.set(\"command_id\", pm.response.json().id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n    \"Columns\" : \"7\",\r\n    \"Rows\" : \"7\",\r\n    \"Description\" : \"7 X 7 map\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-host}}:{{port}}/api/maps",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "moveCommands",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands/move",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands",
						"move"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteCommand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic tests (1 QP)\r",
							"pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));\r",
							"pm.test(\"Response body is empty\", () => pm.expect(pm.response.text()).to.be.empty);\r",
							"\r",
							"// Additional test (for subsequent GET request)\r",
							"// Create a new request named \"GET Deleted Command\" and use the following test:\r",
							"pm.test(\"Status code is 404\", () => pm.response.to.have.status(404));\r",
							"\r",
							"// New\r",
							"\r",
							"// Test for allowed status codes (204, 404, or others if needed)\r",
							"pm.test(\"Status code is valid\", function () {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([204, 404]); // Add other codes if applicable\r",
							"});\r",
							"\r",
							"// Dynamically validate the response body based on the status code\r",
							"pm.test(\"Validate response body\", function () {\r",
							"  if (pm.response.code === 204) {\r",
							"    pm.expect(pm.response.text()).to.be.empty; // 204 should have no content\r",
							"  } else if (pm.response.code === 404) {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.include(\"not found\"); // Adjust message if needed\r",
							"  }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{api-host}}:{{port}}/api/robot-commands/3",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robot-commands",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "addUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"John@example.com\",\r\n  \"password\": \"John@example.com\",\r\n  \"description\": \"Robot supervisor\",\r\n  \"role\": \"admin\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api-host}}:{{port}}/users",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "John@example.com",
				"type": "string"
			},
			{
				"key": "username",
				"value": "John@example.com",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}